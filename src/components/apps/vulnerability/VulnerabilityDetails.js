import React, { useEffect, useState } from "react";
import { useParams } from "react-router";

import {
  Card,
  CardBody,
  CardHeader,
  Typography,
  Switch,
  Chip,
} from "@material-tailwind/react";
import {
  ExclamationCircleIcon,
  QueueListIcon,
} from "@heroicons/react/24/solid";
import { PrismAsyncLight as SyntaxHighlighter } from "react-syntax-highlighter";
import prism from "react-syntax-highlighter/dist/esm/styles/prism/prism";

export default function VulnerabilityDetails() {
  const params = useParams();

  const [vulnerability, setVulnerability] = useState({});
  const [risk, setRisk] = useState({});
  const [tag, setTag] = useState({});
  const [result, setResult] = useState({});

  const getVulnerability = (id) => {
    fetch(`http://yggdrasil-api:8337/yggdrasil/v1/risk/vulnerability/${id}`, {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setVulnerability(data);
        getRisk(data.risk);
        // getTag(data.tag)
        console.log("vuln ", data);
      })
      .catch((err) => console.error(err));
  };
  const getResult = (id) => {
    fetch(`http://hiemdall-api:8338/hiemdall/v1/result/${id}`, {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setResult(data);
        getVulnerability(data.vulnerability_id);
        console.log("result ", data);
      })
      .catch((err) => console.error(err));
  };
  const getRisk = (id) => {
    fetch(`http://yggdrasil-api:8337/yggdrasil/v1/risk/risk/${id}`, {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setRisk(data);
        console.log("risk ", data);
      })
      .catch((err) => console.error(err));
  };
  const getTag = (id) => {
    fetch(`http://yggdrasil-api:8337/yggdrasil/v1/risk/tag/${id}`, {
      method: "GET",
    })
      .then((res) => res.json())
      .then((data) => {
        setTag(data);
        console.log("tag ", data);
      })
      .catch((err) => console.error(err));
  };

  useEffect(() => {
    getResult(params.id);
    // getResult();
    // getRisk();
    // getTag();
  }, []);

  return (
    <>
      <div className="relative mt-8 h-20 w-full overflow-hidden rounded-xl bg-cover bg-center">
        <div className="absolute inset-0 h-full w-full bg-red-100" />
      </div>

      <Card className="mx-3 -mt-16 mb-6 lg:mx-4 border border-blue-gray-100">
        <CardBody className="p-4">
          <div className="mb-10 flex items-center justify-between flex-wrap gap-6">
            <div className="flex items-center gap-6">
              <div className="rounded-lg blue border border-blue-gray-900 w-20 h-20 justify-center items-center flex">
                <QueueListIcon fill="blue-gray" className="w-8 h-8" />
              </div>
              <div>
                <Typography variant="h5" color="blue-gray" className="mb-1">
                  Vulnerability Details
                </Typography>
                <Typography
                  variant="small"
                  className="font-normal text-blue-gray-600"
                >
                  Get an in-depth understanding of the Vulnerability.
                </Typography>
              </div>
            </div>
          </div>
          <div className="gird-cols-1 mb-12 grid gap-12 px-4">
            <Card>
              <CardHeader variant="gradient" color="gray" className="mb-8 p-6">
                <Typography variant="h6" color="white">
                  managed by <code className="text-red-100">asgard</code>
                </Typography>
              </CardHeader>
              <CardBody className="overflow-x-scroll px-0 pt-0 pb-2">
                <div className="">
                  <div className="flex items-center gap-4 px-8">
                    <div className="flex items-center gap-4 w-full">
                      <ExclamationCircleIcon
                        className={`h-8 w-8 ${
                          vulnerability["severity"] === "c"
                            ? "text-red-300"
                            : vulnerability["severity"] === "h"
                            ? "text-orange-300"
                            : vulnerability["severity"] === "m"
                            ? "text-yellow-300"
                            : vulnerability["severity"] === "l"
                            ? "text-green-300"
                            : "text-gray-900"
                        } `}
                      />
                      <div className="">
                        <Typography variant="h5" color="blue-gray">
                          {vulnerability["name"]}
                        </Typography>
                        <Typography className="text-xs font-normal text-blue-gray-500">
                          {risk["name"]}
                          {console.log("risk")}
                          {console.log(risk)}
                          {console.log("vulnerability")}
                          {console.log(vulnerability)}
                          {console.log("result")}
                          {console.log(result)}
                        </Typography>
                      </div>
                    </div>
                    <div className="flex items-center">
                      <Chip
                        variant="gradient"
                        color={
                          vulnerability["power"] === 3
                            ? "orange"
                            : vulnerability["power"] === 2
                            ? "yellow"
                            : "green"
                        }
                        value={`power : ${
                          vulnerability["power"] === 3
                            ? "high"
                            : vulnerability["power"] === 2
                            ? "medium"
                            : "low"
                        }`}
                        className="py-0.5 px-2 text-[11px] font-medium w-fit"
                      />
                    </div>
                    <div className="flex">
                      <Chip
                        variant="gradient"
                        color={
                          vulnerability["severity"] === "c"
                            ? "red"
                            : vulnerability["severity"] === "h"
                            ? "orange"
                            : vulnerability["severity"] === "m"
                            ? "yellow"
                            : vulnerability["severity"] === "l"
                            ? "green"
                            : "gray"
                        }
                        value={`severity : ${
                          vulnerability["severity"] === "c"
                            ? "critical"
                            : vulnerability["severity"] === "h"
                            ? "high"
                            : vulnerability["severity"] === "m"
                            ? "medium"
                            : vulnerability["severity"] === "l"
                            ? "low"
                            : "info"
                        }`}
                        className="py-0.5 px-2 text-[11px] font-medium w-fit"
                      />
                    </div>
                  </div>
                  <hr className="my-4" />
                </div>
                <div className="grid grid-cols-6 gap-4">
                  <div className="col-span-4">
                    <div className="ml-10">
                      <p className="underline text-black font-bold py-4 uppercase text-xs">
                        Details
                      </p>
                      <Typography className="text-normal whitespace-break-spaces">
                        {risk["description"]}
                      </Typography>
                      <p className="underline text-black font-bold py-4 uppercase text-xs">
                        Steps To Reproduce
                      </p>
                      <Typography className="text-normal whitespace-break-spaces">
                        {vulnerability["steps_to_reproduce"]}
                      </Typography>
                      <p className="underline text-black font-bold py-4 uppercase text-xs">
                        Mitigation
                      </p>
                      <Typography className="text-normal whitespace-break-spaces">
                        {risk["remediation"]}
                      </Typography>
                      <p className="underline text-black font-bold py-4 uppercase text-xs">
                        Command
                      </p>
                      <SyntaxHighlighter
                        lineProps={{ style: { paddingBottom: 8 } }}
                        wrapLines={true}
                        wrapLongLines={true}
                        language="bash"
                        style={prism}
                      >
                        {result["curl_command"]}
                      </SyntaxHighlighter>
                    </div>
                  </div>
                  <div className="col-span-2 p-4">
                  <p className="underline text-black font-bold py-2 uppercase text-xs">
                      Matcher detected
                    </p>
                    <SyntaxHighlighter
                      lineProps={{ style: { paddingBottom: 8 } }}
                      wrapLines={true}
                      wrapLongLines={true}
                      language="bash"
                      style={prism}
                    >
                      {result["matcher_name"]}
                    </SyntaxHighlighter>
                    <p className="underline text-black font-bold py-2 uppercase text-xs">
                      Link to reproduce
                    </p>
                    <Typography
                      color="blue"
                      className="whitespace-pre-wrap bg-gray-200 p-2 rounded-md"
                    >
                      <a
                        href={result["matched_at"]}
                        className="text-blue-500 hover:text-blue-700 text-sm underline font-mono"
                        target="_blank"
                      >
                        {result["matched_at"]}
                      </a>
                    </Typography>
                    <p className="underline text-black font-bold py-2 uppercase text-xs">
                      Payload
                    </p>
                    <SyntaxHighlighter
                      lineProps={{ style: { paddingBottom: 8 } }}
                      wrapLines={true}
                      wrapLongLines={true}
                      language="bash"
                      style={prism}
                    >
                      {result["payload_str"]}
                    </SyntaxHighlighter>
                  </div>
                </div>
              </CardBody>
            </Card>
          </div>
        </CardBody>
      </Card>
    </>
  );
}
